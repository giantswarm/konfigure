apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "resource.default.name"  . }}
  namespace: {{ include "resource.default.namespace"  . }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
      annotations:
        releaseRevision: {{ .Release.Revision | quote }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  {{- include "labels.selector" . | nindent 18 }}
              topologyKey: kubernetes.io/hostname
            weight: 100
      volumes:
      - name: {{ include "name" . }}-configmap
        configMap:
          name: {{ include "resource.default.name"  . }}
          items:
          - key: config.yaml
            path: config.yaml
      - name: {{ include "name" . }}-secret
        secret:
          secretName: {{ include "resource.default.name"  . }}
          items:
          - key: secret.yaml
            path: secret.yaml
      - name: certs
        hostPath:
          path: /etc/ssl/certs/ca-certificates.crt
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs/
      serviceAccountName: {{ include "resource.default.name"  . }}
      securityContext:
        runAsUser: {{ .Values.pod.user.id }}
        runAsGroup: {{ .Values.pod.group.id }}
      initContainers:
      - args:
        - --vault-address={{ .Values.Installation.V1.Auth.Vault.Address }}
        - --vault-role=konfigure
        - --vault-token-secret-name={{ include "resource.default.name" . }}-vault-token
        - --vault-token-secret-namespace={{ include "resource.default.namespace" . }}
        image: "{{ .Values.Installation.V1.Registry.Domain }}/{{ .Values.k8sJwtToVaultTokenImage.name}}:{{ .Values.k8sJwtToVaultTokenImage.tag }}"
        imagePullPolicy: Always
        name: ensure-vault-token
      containers:
      - name: {{ include "name" . }}
        image: "{{ .Values.Installation.V1.Registry.Domain }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        args:
        - daemon
        - --config.dirs=/var/run/{{ include "name" . }}/configmap/,/var/run/{{ include "name" . }}/secret/
        - --config.files=config,secret
        - --service.vault.token=$(VAULT_TOKEN)
        volumeMounts:
        - name: {{ include "name" . }}-configmap
          mountPath: /var/run/{{ include "name" . }}/configmap/
        - name: {{ include "name" . }}-secret
          mountPath: /var/run/{{ include "name" . }}/secret/
        - name: certs
          mountPath: /etc/ssl/certs/ca-certificate.crt
        - name: ssl-certs
          mountPath: /etc/ssl/certs/
        env:
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: {{ include "resource.default.name" . }}-vault-token
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8000
          initialDelaySeconds: 30
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 220Mi
          limits:
            cpu: 100m
            memory: 220Mi
